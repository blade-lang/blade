{
	"fileTypes": [
		"bird"
	],
	"foldingStartMarker": "\\{\\s*$",
	"foldingStopMarker": "^\\s*\\}",
	"name": "Bird",
	"patterns": [
		{
			"begin": "^\\w*\\b(import)\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.other.import.bird"
				}
			},
			"end": "\n",
			"endCaptures": {
				"0": {
					"name": "punctuation.terminator.bird"
				}
			},
			"name": "meta.declaration.bird",
			"patterns": [
				{
					"include": "#strings"
				},
				{
					"include": "#comments"
				},
				{
					"match": "\\b(as)\\b",
					"name": "keyword.other.import.bird"
				}
			]
		},
		{
			"include": "#comments"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#annotations"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#constants-and-special-vars"
		},
		{
			"include": "#strings"
		}
	],
	"repository": {
		"birddoc": {
			"patterns": [
				{
					"match": "(@[a-zA-Z_]+)",
					"captures": {
						"0": {
							"name": "variable.name.source.bird"
						}
					}
				},
				{
					"match": "(`.*?`)",
					"captures": {
						"0": {
							"name": "variable.other.source.bird"
						}
					}
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.bird"
						}
					},
					"match": "\/\\*\\*\/",
					"name": "comment.block.empty.bird"
				},
				{
					"include": "#comments-doc-oldschool"
				},
				{
					"include": "#comments-doc"
				},
				{
					"include": "#comments-inline"
				}
			]
		},
		"comments-doc-oldschool": {
			"patterns": [
				{
					"begin": "\/\\*",
					"end": "\\*\/",
					"name": "comment.block.documentation.bird",
					"patterns": [
						{
							"include": "#comments-doc-oldschool"
						},
						{
							"include": "#comments-block"
						},
						{
							"include": "#birddoc"
						}
					]
				}
			]
		},
		"comments-doc": {
			"patterns": [
				{
					"begin": "\/\\*",
					"while": "^\\s*\\*\/",
					"patterns": [
						{
							"include": "#birddoc"
						}
					],
					"name": "comment.block.documentation.bird"
				}
			]
		},
		"comments-inline": {
			"patterns": [
				{
					"include": "#comments-block"
				},
				{
					"captures": {
						"1": {
							"name": "comment.line.double-slash.bird"
						}
					},
					"match": "((#).*)$"
				}
			]
		},
		"comments-block": {
			"patterns": [
				{
					"begin": "\/\\*",
					"end": "\\*\/",
					"name": "comment.block.bird",
					"patterns": [
						{
							"include": "#comments-block"
						}
					]
				}
			]
		},
		"annotations": {
			"patterns": [
				{
					"match": "@",
					"name": "storage.type.annotation.bird"
				}
			]
		},
		"constants-and-special-vars": {
			"patterns": [
				{
					"match": "(?<!\\$)\\b(true|false|nil)\\b(?!\\$)",
					"name": "constant.language.bird"
				},
				{
					"match": "((?<!\\$)\\b(self|parent)\\b(?!\\$)|(__[a-zA-Z_0-9]+__))",
					"name": "variable.language.bird"
				},
				{
					"match": "(?<!\\$)\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b(?!\\$)",
					"name": "constant.numeric.bird"
				},
				{
					"match": "(?<![a-zA-Z0-9_$])([_$]*[A-Z][a-zA-Z0-9_$]*)",
					"name": "support.class.bird"
				},
				{
					"match": "([_$]*[a-z][a-zA-Z0-9_$]*)(<|\\(|\\s+=>)",
					"captures": {
						"1": {
							"name": "entity.name.function.bird"
						}
					}
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"match": "(?<!\\$)\\bas\\b(?!\\$)",
					"name": "keyword.cast.bird"
				},
				{
					"match": "(?<!\\$)\\b(try|catch|finally|die)\\b(?!\\$)",
					"name": "keyword.control.catch-exception.bird"
				},
				{
					"match": "(?<!\\$)\\b(break|when|continue|default|else|for|if|in|return|using|while|iter)\\b(?!\\$)",
					"name": "keyword.control.bird"
				},
				{
					"match": "(?<!\\$)\\b(or|and|assert)\\b(?!\\$)",
					"name": "keyword.control.boolean.bird"
				},
				{
					"match": "(?<!\\$)\\b(var|class|def)\\b(?!\\$)",
					"name": "keyword.declaration.bird"
				},
				{
					"match": "(?<!\\$)\\b(is\\!?)\\b(?!\\$)",
					"name": "keyword.operator.bird"
				},
				{
					"match": "\\?\\?",
					"name": "keyword.operator.conditional.bird"
				},
				{
					"match": "(<<|>>>?|~|\\^|\\||&)",
					"name": "keyword.operator.bitwise.bird"
				},
				{
					"match": "((&|\\^|\\||<<|>>?)=)",
					"name": "keyword.operator.assignment.bitwise.bird"
				},
				{
					"match": "(=>)",
					"name": "keyword.operator.closure.bird"
				},
				{
					"match": "(==|!=|<<?=?|>>?=?|(\\.\\.\\.))",
					"name": "keyword.operator.comparison.bird"
				},
				{
					"match": "(([+*/%-]|\\~)=)",
					"name": "keyword.operator.assignment.arithmetic.bird"
				},
				{
					"match": "(=)",
					"name": "keyword.operator.assignment.bird"
				},
				{
					"match": "(\\-\\-|\\+\\+)",
					"name": "keyword.operator.increment-decrement.bird"
				},
				{
					"match": "(\\-|\\+|\\*|\\/|\\~\\/|%|\\*\\*)",
					"name": "keyword.operator.arithmetic.bird"
				},
				{
					"match": "(!)",
					"name": "keyword.operator.binary.bird"
				},
				{
					"match": "(?<!\\$)\\b(static)\\b(?!\\$)",
					"name": "storage.modifier.bird"
				},
				{
					"match": "(?<!\\$)\\b(?:echo)\\b(?!\\$)",
					"name": "storage.type.primitive.bird"
				}
			]
		},
		"string-interp": {
			"patterns": [
				{
					"captures": {
						"2": {
							"name": "variable.parameter.bird"
						},
						"3": {
							"name": "variable.parameter.bird"
						}
					},
					"match": "\\$(\\{([^{}]+)\\})"
				},
				{
					"match": "\\\\.",
					"name": "constant.character.escape.bird"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "(?<!\\|r)\"",
					"end": "\"",
					"name": "string.interpolated.double.bird",
					"patterns": [
						{
							"match": "\\n",
							"name": "invalid.string.newline"
						},
						{
							"include": "#string-interp"
						}
					]
				},
				{
					"begin": "r\"",
					"end": "\"",
					"name": "string.quoted.double.bird",
					"patterns": [
						{
							"match": "\\n",
							"name": "invalid.string.newline"
						}
					]
				},
				{
					"begin": "(?<!\\|r)'",
					"end": "'",
					"name": "string.interpolated.single.bird",
					"patterns": [
						{
							"match": "\\n",
							"name": "invalid.string.newline"
						},
						{
							"include": "#string-interp"
						}
					]
				},
				{
					"begin": "r'",
					"end": "'",
					"name": "string.quoted.single.bird",
					"patterns": [
						{
							"match": "\\n",
							"name": "invalid.string.newline"
						}
					]
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"match": ",",
					"name": "punctuation.comma.bird"
				},
				{
					"match": "\n",
					"name": "punctuation.terminator.bird"
				},
				{
					"match": "\\.",
					"name": "punctuation.dot.bird"
				}
			]
		}
	},
	"scopeName": "source.bird"
}