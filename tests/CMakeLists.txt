# define a function to simplify adding tests
function(add_blade_test target arg index result)
    message(STATUS "setting up test ${arg}_${index} -> tests/${arg}.b")
    add_test(NAME ${arg}_${index} COMMAND ${CMAKE_CURRENT_BINARY_DIR}/../blade/${PROJECT_NAME} ../blade/tests/${arg}.b)
    set_tests_properties(${arg}_${index}
            PROPERTIES PASS_REGULAR_EXPRESSION ${result}
            )
endfunction(add_blade_test)

file(GLOB_RECURSE TEST_FILES "${CMAKE_SOURCE_DIR}/tests/*.b")

FOREACH(file_path ${TEST_FILES})
    add_test(NAME ${file_path} COMMAND ${CMAKE_CURRENT_BINARY_DIR}/../blade/${PROJECT_NAME} ${file_path})
    message(STATUS "Adding test ${file_path}")
ENDFOREACH()

## do a bunch of result based tests
#add_blade_test(blade anonymous 0 "works")
#add_blade_test(blade anonymous 1 "is the best")
#add_blade_test(blade assert 0 "Illegal State:")
#add_blade_test(blade assert 1 "empty list expected")
#add_blade_test(blade bytes 0 "\\(0 0 0 0 0\\)")
#add_blade_test(blade bytes 1 "HELLO")
#add_blade_test(blade class 0 "3")
#add_blade_test(blade class 1 "10")
#add_blade_test(blade class 2 "scone with berries and cream")
#add_blade_test(blade class 3 "Person is shouting")
#add_blade_test(blade class 4 "2001")
#add_blade_test(blade class 5 "Richard. You are 15")
#add_blade_test(blade class 6 "Jane. You are 25")
#add_blade_test(blade class 7 "A")
#add_blade_test(blade class 8 "Name is set")
#add_blade_test(blade class 9 "cannot call private method '_echo'")
#add_blade_test(blade closure 0 "outer\nreturn from outer\ncreate inner closure\nvalue\n1498500")
#add_blade_test(blade condition 0 "Test passed\nTest passed")
#add_blade_test(blade dictionary 0 "age: 28")
#add_blade_test(blade dictionary 1 "Plot 10,")
#add_blade_test(blade dictionary 2 "30")
#add_blade_test(blade dictionary 3 "children: 2")
#add_blade_test(blade dictionary 4 "{name: Richard, age: 30}")
#add_blade_test(blade dictionary 5 "{name: Richard, age: 53}")
#add_blade_test(blade dictionary 6 "{name: Alexander, age: 30}")
#add_blade_test(blade do 0 "10\n9")
#add_blade_test(blade do 1 "2\n1")
#add_blade_test(blade die 0 "Exception")
#add_blade_test(blade for 0 "address = Nigeria")
#add_blade_test(blade for 1 "1 = 7")
#add_blade_test(blade for 2 "n\na\nm\ne")
#add_blade_test(blade for 3 "12\n13\n14\n15")
#add_blade_test(blade for 4 "Richard\nAlex\nJustina")
#add_blade_test(blade function 0 "outer")
#add_blade_test(blade function 1 "<function test\\(0\\) at 0")
#add_blade_test(blade function 2 "It works! inner")
#add_blade_test(blade function 3 "Richard")
#add_blade_test(blade function 4 "\\[James\\]")
#add_blade_test(blade function 5 "Sin 10 = -0.5440211108893656")
#add_blade_test(blade if 0 "It works")
#add_blade_test(blade if 1 "Nope")
#add_blade_test(blade if 2 "2 is less than 5")
#add_blade_test(blade if 3 "Ok")
#add_blade_test(blade import 0 "Richard,")
#add_blade_test(blade import 1 "Alagbaa Estate")
#add_blade_test(blade import 2 "It works! inner")
#add_blade_test(blade import 3 "Sin 10 =")
#add_blade_test(blade import 4 "3.141592653589734")
#add_blade_test(blade iter 0 "The new x = 0")
#add_blade_test(blade list 0 "\\[\\[1, 2, 4], \\[4, 5, 6\\], \\[7, 8, 9\\]\\]")
#add_blade_test(blade logarithm 0 "3.044522437723423\n3.044522437723423")
#add_blade_test(blade native 0 "10\n300\n\\[1, 2, 3\\]\n{name: Richard, age: 28}\nA class called A\n")
#add_blade_test(blade native 1 "832040\nTime taken")
#add_blade_test(blade native 2 "1548008755920\nTime taken")
#add_blade_test(blade pi 0 "3.141592653589734")
#add_blade_test(blade scope 1 "inner\nouter")
#add_blade_test(blade string 0 "25, This is john's LAST 20")
#add_blade_test(blade errors 0 "there was an exception")
#add_blade_test(blade errors 1 "x is undefined")
#add_blade_test(blade errors 2 "<class Exception")
#add_blade_test(blade errors 3 "wasn't bound to any variable")
#add_blade_test(blade errors 4 "Second exception thrown")
#add_blade_test(blade errors 5 "Despite the error, I run because I am in finally")
#add_blade_test(blade errors 6 "list index 8 out of range")
#add_blade_test(blade errors 7 "Catching exception...")
#add_blade_test(blade errors 8 "I am a thrown exception")
#add_blade_test(blade errors 9 "Try block called")
#add_blade_test(blade errors 10 "Final block called")
#add_blade_test(blade errors 11 "Error occurred, but I will still run")
#add_blade_test(blade errors 12 "message: I am a thrown exception")
#add_blade_test(blade using 0 "ten\nafter")
#add_blade_test(blade var 0 "it works\n20\ntrue")
#add_blade_test(blade while 0 "x = 51")